#!/bin/bash

cd /srv/tree
while `mountpoint -q ./proc` ; do
	umount proc
done
while `mountpoint -q ./dev` ; do
	umount dev
done
while `mountpoint -q ./sys` ; do
	        umount sys
done

rm -rf ./*

mkdir -p dev sys proc run boot var/home var/mnt var/opt var/roothome sysroot/ostree sysroot/tmp usr/bin usr/sbin usr/lib usr/lib64  usr/etc

ln -s usr/etc etc
ln -s var/home home
ln -s var/roothome root
ln -s var/mnt mnt
ln -s var/opt opt
ln -s sysroot/ostree ostree
ln -s sysroot/tmp tmp

mkdir -p etc/init.d
cat <<EOF > etc/init.d/vardirs
#!/sbin/openrc-run

description="Create targets for ostree deployments"

depend()
{
	need localmount
}

start() {
	ebegin "Setting dirs"
	export RC_NO_UMOUNTS=/usr:$RC_NO_UMOUNTS
	mkdir -m 0755 -p /var/cache/rc /var/cache/apk /var/mnt /var/opt /var/roothome /sysroot/ostree /sysroot/tmp
	ln -s /var/home /sysroot/home &>/dev/null
	eend $?
}

stop() {
	return
}
EOF
chmod +x etc/init.d/vardirs

## mount-ro env var
mkdir -p etc/conf.d
echo "RC_NO_UMOUNTS=/usr" > etc/conf.d/mount-ro

## fstab
cat <<EOF > etc/fstab
/dev/vda3               /               xfs     rw,noatime,nodiratime,largeio,inode64,nobarrier 0 0
/dev/vda1		/boot		xfs 	rw,noexec,nodev,noatime,nodiratime,largeio,inode64 0 0
/dev/vda2		swap		swap	defaults 0 0
/boot			/sysroot/boot	none 	bind 0 0
/ostree/deploy/pine/var /var 		none	bind 0 0
EOF

## repositories
mkdir -p etc/apk
cat <<EOF > etc/apk/repositories
http://dl-cdn.alpinelinux.org/alpine/latest-stable/main
http://dl-cdn.alpinelinux.org/alpine/latest-stable/community
http://dl-cdn.alpinelinux.org/alpine/edge/community
http://dl-cdn.alpinelinux.org/alpine/edge/testing
EOF

## nameservers
cat <<EOF > etc/resolv.conf
nameserver 8.8.8.8
nameserver 2001:4860:4860:0:0:0:0:8888
EOF

## net
mkdir -p etc/network
cat <<EOF > etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
    hostname pine
EOF

## sudo
mkdir -p etc/sudoers.d
cat <<EOF > etc/sudoers.d/pine
pine ALL=(ALL) NOPASSWD: ALL
EOF

mount --bind /sys sys
mount --bind /proc proc
mount --bind /dev dev

apkc(){
	apk --arch x86_64 -U --allow-untrusted --root $PWD --initdb add \
		-X http://nl.alpinelinux.org/alpine/v3.5/main/ \
		-X http://nl.alpinelinux.org/alpine/edge/testing/ \
		$@
}
apkc alpine-base \
	tzdata \
	mkinitfs \
	grub-bios \
	util-linux \
	xfsprogs \
	ca-certificates \
	iptables \
	sudo \
	ostree \
	`apk info -R docker | sed '/so:/q' | tail -n +4 | head -n -1` \
	htop iftop sysstat mosh-server tmux 

## fix for grub without syslinux
rm etc/grub.d/10_linux

## SETUP
chpwd() {
	chroot $PWD $@
}
hostname=pine
chpwd echo "root:rootppp" | chpwd chpasswd
chpwd echo "pine:pineppp" | chpwd chpasswd
echo '' > etc/motd
chpwd setup-hostname $hostname
chpwd setup-timezone -z CET
chpwd setup-sshd -c dropbear
chpwd setup-ntp -c busybox

for r in `cat ../runlevels.pine` ; do
	mkdir -p `dirname $r`
	ln -srf etc/init.d/`basename $r` `echo "$r" | sed 's#^/##'`
done

## EXTRA
last_version() {
	git ls-remote -t git://github.com/"$1".git | awk '{print $2}' | cut -d '/' -f 3 | grep -v "\-rc" | cut -d '^' -f 1 | sed 's/^v//' | sort -b -t . -k 1,1nr -k 2,2nr -k 3,3r -k 4,4r -k 5,5r | head -1
}

## GLIB
GLIB_VERSION=`last_version sgerrand/alpine-pkg-glibc`
wget -q -O etc/apk/keys/sgerrand.rsa.pub https://raw.githubusercontent.com/sgerrand/alpine-pkg-glibc/master/sgerrand.rsa.pub
wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/$GLIB_VERSION/glibc-$GLIB_VERSION.apk
apk --initdb --arch x86_64 -U --allow-untrusted --root $PWD add glibc-$GLIB_VERSION.apk
rm glibc-$GLIB_VERSION.apk

## DOCKER
DOCKER_VERSION=`last_version docker/docker`
wget https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}.tgz -O docker.tgz
tar xf docker.tgz
mv docker/docker* usr/bin/
rm -rf docker docker.tgz

## TERRAFORM
TERRAFORM_VERSION=`last_version hashicorp/terraform`
wget https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -O terra.zip
unzip terra.zip
mv terraform usr/bin
rm -rf terra.zip

## ETCD
ETCD_VERSION=`last_version coreos/etcd`
wget https://github.com/coreos/etcd/releases/download/v$ETCD_VERSION/etcd-v$ETCD_VERSION-linux-amd64.tar.gz -O etcd.zip
tar xvf etcd.zip
mv etcd*/etcd* usr/bin
rm -rf etcd*

## COMPRESSION
upx --best usr/bin/etcd
upx --best usr/bin/etcdctl
upx --best usr/bin/docker*
upx --best usr/bin/terraform

## BOOT
apkc --no-scripts linux-virtgrsec
patch usr/share/mkinitfs/initramfs-init ../initramfs-ostree.patch
chroot $PWD mkinitfs -F "ata base cdrom ext2 ext3 ext4 xfs keymap kms mmc raid scsi usb virtio"
mv boot tmpboot && mkdir boot
cp -a tmpboot/vmlinuz-virtgrsec boot/
cp -a tmpboot/initramfs-virtgrsec boot/
cksum=`cat boot/vmlinuz-virtgrsec boot/initramfs-virtgrsec | sha256sum | cut -f 1 -d ' '`
mv boot/vmlinuz-virtgrsec boot/vmlinuz-virtgrsec-${cksum}
mv boot/initramfs-virtgrsec boot/initramfs-virtgrsec-${cksum}
rm tmpboot -rf

## FIXES
rm -rf lib/rc/cache
ln -s /var/cache/rc lib/rc/cache

## CLEANUP
while `mountpoint -q ./proc` ; do
	umount proc
done
while `mountpoint -q ./dev` ; do
	umount dev
done
while `mountpoint -q ./sys` ; do
	umount sys
done
rm dev var run etc -rf
mkdir -p dev var run usr/lib usr/bin usr/sbin
cp -a --remove-destination lib/* usr/lib
rm lib -rf && ln -s usr/lib lib
cp -a --remove-destination lib64/* usr/lib
rm lib64 -rf && ln -s usr/lib lib64
cp -a --remove-destination bin/* usr/bin
rm bin -rf && ln -s usr/bin bin
cp -a --remove-destination sbin/* usr/sbin
rm sbin -rf && ln -s usr/sbin sbin

## OSTREE
cd /srv
ostree --repo=pine commit -s $(date)'-build' -b trunk --tree=dir=tree
ostree summary -u --repo=pine
#pgrep -f trivial-httpd &>/dev/null || ostree trivial-httpd -P 39767 /srv/pine -d
