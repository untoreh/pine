#!/bin/sh
## this file must be sourced to operate in the correct directory

## ETCD
cat << 'EOF' >usr/bin/etcdctl
#!/bin/sh

exec docker exec -e ETCDCTL_API=${ETCDCTL_API:-3} -it $(docker ps -f name=etcd -q) etcdctl $@
EOF
cat << 'EOF' >etc/init.d/etcd
#!/sbin/openrc-run

## Stub service to wait for the etcd container to start
SVCNAME="etcd container"

depend() {
    need net docker
}

start() {
    ebegin "Waiting for $SVCNAME"
    timeout -t 30 /bin/busybox sh -c ' \
    until [ "`docker inspect -f {{.State.Running}} $(docker ps -q -f name=etcd)`" == "true" ]; do
        sleep 0.5;
    done;'
    eend $? "$SVCNAME did not start"
}
EOF

## REBOOT MANAGER
## - The clearlock scripts dequeues the node from the list stored on etcd after boot
## - the reboot command is wrapped with a script to also support reboot locking
cat << 'EOF' >etc/init.d/clearlock
#!/sbin/openrc-run

description="Create targets for ostree deployments"

depend()
{
        need etcd
}

start() {
        ebegin "Clearning etcd reboot lock"
        if [ find /sbin/reboot -type f ] ; then
            exec /usr/bin/timeout -s2 -t900 /sbin/reboot lock clear
        fi
        eend $?
}

stop() {
        return
}
EOF
chmod +x etc/init.d/clearlock
rm sbin/reboot ## remove to avoid following symlink during copy
cp ../reboot.pine sbin/reboot
chmod +x sbin/reboot

## SUP
## - the sup command is wrapped to use a default Supfile script located in etc/Supfile
## for common utilities like bootstrapping an etcd cluster
mkdir -p /go
export GOPATH=/go GOROOT=/usr/lib/go
go get -u github.com/pressly/sup/cmd/sup
mv /go/bin/sup usr/bin/sup.bin
cp ../Supfile etc/
## touch hosts files to not let sup fail on local hostsless execution
touch etc/cluster etc/leaders etc/workers
cat << 'EOF' >usr/bin/sup
#!/bin/bash -l
export -f `declare -F | awk '{print $3}'`
SUP_FILE=/etc/Supfile
if $(echo "$@" | grep -qE "\-f\s+[^\s]+\s*") ; then
    exec /usr/bin/sup.bin -e SUP_FILE=$SUP_FILE $@
else
    exec /usr/bin/sup.bin -e SUP_FILE=$SUP_FILE -f $SUP_FILE $@
fi
EOF
chmod +x usr/bin/sup

## ssh wrapper to load environment vars which dropbear does not support
cat << 'EOF' >usr/bin/ssheval
#!/bin/bash -l

if [ -n "$SSH_ORIGINAL_COMMAND" ]; then
    rgx='^(([^=]*=([^[:space:]\\]*)|((\\.)+[^\\[:space:]]*))*)([[:space:]]*[^[:space:]]+)(.*)'
    [[ "$SSH_ORIGINAL_COMMAND" =~ $rgx ]]
    if [ -z "$(type -p ${BASH_REMATCH[6]% *})" ]; then
        eval "$SSH_ORIGINAL_COMMAND"
    else
        vars=${BASH_REMATCH[1]}
        args=${BASH_REMATCH[6]}${BASH_REMATCH[7]}
        rgx='^[^"'\'']*;'
        if [[ "$args" =~ $rgx ]]; then ## don't exec multi commands
            eval "$SSH_ORIGINAL_COMMAND"
        else
            eval "$vars exec $args"
        fi
    fi
else

    exec /bin/sh -li
fi

EOF
chmod +x usr/bin/ssheval

## some utility shell functions
cp ../functions.pine etc/profile.d/func.sh

## OSTree
cp ../trees.sh usr/bin/trees && chmod +x usr/bin/trees

export GOPATH=/root/go GOROOT=/usr/lib/go

## RUNC
trees_repo="untoreh/trees"
trees_repo_path_bin="templates/runc.sh"
trees_repo_path_etc="templates/runc.json"
runc_repo="opencontainers/runc"
go get -d github.com/${runc_repo}
go install github.com/${runc_repo}
mv $GOPATH/bin/runc usr/bin/runc.bin
chmod +x usr/bin/runc.bin
fetch_artifact https://raw.githubusercontent.com/${trees_repo}/master/${trees_repo_path_bin} - >usr/bin/runc
chmod +x usr/bin/runc
fetch_artifact https://raw.githubusercontent.com/${trees_repo}/master/${trees_repo_path_etc} - >usr/etc/runc.json

## OCI RUNTIME TOOLS
oci_repo="opencontainers/runtime-tools"
go get -d github.com/${oci_repo}
ppwd=$PWD
cd $GOPATH/src/github.com/${oci_repo}/ && make
cd $ppwd
mv /root/go/src/github.com/${oci_repo}/oci-runtime-tool usr/bin
chmod +x usr/bin/oci-runtime-tool

## EMPTY (ttys)
wget "https://sourceforge.net/projects/empty/files/latest/download?source=files" -qO empty.tgz
tar xf empty.tgz
rm -f ./empty.tgz
ppwd=$PWD
cd empty-* && make
cp empty $ppwd/usr/bin/empty
cd $ppwd
rm -rf ./empty-*
chmod +x usr/bin/empty

## CONSUL
apkc add consul consul-template
consul_repo="hashicorp/consul"
CONSUL_VERSION=$(last_version $consul_repo)
consul_url="https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip"
rm usr/sbin/consul
fetch_artifact $consul_url usr/sbin
chmod +x usr/sbin/consul
setcap 'cap_net_bind_service=+ep' usr/sbin/consul

## CONTAINERPILOT
copi_repo="joyent/containerpilot"
trees_repo="untoreh/trees"
trees_repo_path_copi="templates/containerpilot.json5"
#COPI_VERSION=$(last_version $copi_repo)
fetch_artifact "$copi_repo" ".*.tar.gz" usr/bin
chmod +x usr/bin/containerpilot
fetch_artifact https://raw.githubusercontent.com/${trees_repo}/master/${trees_repo_path_copi} - >usr/etc/containerpilot.json5
